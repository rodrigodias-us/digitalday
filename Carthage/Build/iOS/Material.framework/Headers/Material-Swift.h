// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import Foundation;
@import AVFoundation;
@import CoreMedia;
@import QuartzCore;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class CAShapeLayer;
@class UIImage;
@class UIColor;
@class NSCoder;
@class CALayer;
@class CAAnimation;
@protocol MaterialDelegate;

SWIFT_CLASS_NAMED("MaterialView")
@interface MaterialView : UIView

/// A CAShapeLayer used to manage elements that would be affected by the clipToBounds property of the backing layer. For example, this allows the dropshadow effect on the backing layer, while clipping the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;

/// A base delegate reference used when subclassing MaterialView.
@property (nonatomic, weak) id <MaterialDelegate> _Nullable delegate;

/// A property that manages an image for the visualLayer's contents property. Images should not be set to the backing layer's contents property to avoid conflicts when using clipsToBounds.
@property (nonatomic, strong) UIImage * _Nullable image;

/// Allows a relative subrectangle within the range of 0 to 1 to be specified for the visualLayer's contents property. This allows much greater flexibility than the contentsGravity property in terms of how the image is cropped and stretched.
@property (nonatomic) CGRect contentsRect;

/// A CGRect that defines a stretchable region inside the visualLayer with a fixed border around the edge.
@property (nonatomic) CGRect contentsCenter;

/// A floating point value that defines a ratio between the pixel dimensions of the visualLayer's contents property and the size of the view. By default, this value is set to the MaterialDevice.scale.
@property (nonatomic) CGFloat contentsScale;

/// Determines how content should be aligned within the visualLayer's bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;

/// This property is the same as clipsToBounds. It crops any of the view's contents from bleeding past the view's frame. If an image is set using the image property, then this value does not need to be set, since the visualLayer's maskToBounds is set to true by default.
@property (nonatomic) BOOL masksToBounds;

/// A property that accesses the backing layer's backgroundColor.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// A property that accesses the layer.frame.origin.x property.
@property (nonatomic) CGFloat x;

/// A property that accesses the layer.frame.origin.y property.
@property (nonatomic) CGFloat y;

/// A property that accesses the layer.frame.size.width property. When setting this property in conjunction with the shape property having a value that is not .None, the height will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat width;

/// A property that accesses the layer.frame.size.height property. When setting this property in conjunction with the shape property having a value that is not .None, the width will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat height;

/// A property that accesses the backing layer's shadowColor.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;

/// A property that accesses the backing layer's shadowOffset.
@property (nonatomic) CGSize shadowOffset;

/// A property that accesses the backing layer's shadowOpacity.
@property (nonatomic) float shadowOpacity;

/// A property that accesses the backing layer's shadowRadius.
@property (nonatomic) CGFloat shadowRadius;

/// A property that accesses the backing layer's shadowPath.
@property (nonatomic) CGPathRef _Nullable shadowPath;

/// Enables automatic shadowPath sizing.
@property (nonatomic) BOOL shadowPathAutoSizeEnabled;

/// A property that accesses the layer.cornerRadius.
@property (nonatomic) CGFloat cornerRadius;

/// A property that accesses the layer.borderWith.
@property (nonatomic) CGFloat borderWidth;

/// A property that accesses the layer.borderColor property.
@property (nonatomic, strong) UIColor * _Nullable borderColor;

/// A property that accesses the layer.position property.
@property (nonatomic) CGPoint position;

/// A property that accesses the layer.zPosition property.
@property (nonatomic) CGFloat zPosition;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init() initializer.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;

/// A method that accepts CAAnimation objects and executes them on the view's backing layer.
///
/// \param animation A CAAnimation instance.
- (void)animate:(CAAnimation * _Nonnull)animation;

/// A delegation method that is executed when the backing layer starts running an animation.
///
/// \param anim The currently running CAAnimation instance.
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;

/// A delegation method that is executed when the backing layer stops running an animation.
///
/// \param anim The CAAnimation instance that stopped running.
///
/// \param flag A boolean that indicates if the animation stopped
/// because it was completed or interrupted. True if completed, false
/// if interrupted.
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end

@class UIControl;

SWIFT_CLASS("_TtC8Material11ControlView")
@interface ControlView : MaterialView

/// Will render the view.
@property (nonatomic, readonly) BOOL willRenderView;

/// A wrapper around grid.contentInset.
@property (nonatomic) UIEdgeInsets contentInset;

/// A wrapper around grid.spacing.
@property (nonatomic) CGFloat spacing;

/// Grid cell factor.
@property (nonatomic) CGFloat gridFactor;

/// ContentView that holds the any desired subviews.
@property (nonatomic, readonly, strong) MaterialView * _Null_unspecified contentView;

/// Left side UIControls.
@property (nonatomic, copy) NSArray<UIControl *> * _Nullable leftControls;

/// Right side UIControls.
@property (nonatomic, copy) NSArray<UIControl *> * _Nullable rightControls;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init() initializer.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// Basic initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer with parameter settings.
///
/// \param leftControls An Array of UIControls that go on the left side.
///
/// \param rightControls An Array of UIControls that go on the right side.
- (nonnull instancetype)initWithLeftControls:(NSArray<UIControl *> * _Nullable)leftControls rightControls:(NSArray<UIControl *> * _Nullable)rightControls OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (CGSize)intrinsicContentSize;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end


SWIFT_CLASS("_TtC8Material7BarView")
@interface BarView : ControlView

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init() initializer.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer with parameter settings.
///
/// \param leftControls An Array of UIControls that go on the left side.
///
/// \param rightControls An Array of UIControls that go on the right side.
- (nonnull instancetype)initWithLeftControls:(NSArray<UIControl *> * _Nullable)leftControls rightControls:(NSArray<UIControl *> * _Nullable)rightControls OBJC_DESIGNATED_INITIALIZER;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end

@class NSBundle;
@class UIViewController;
@protocol UIViewControllerAnimatedTransitioning;

SWIFT_CLASS("_TtC8Material26BottomNavigationController")
@interface BottomNavigationController : UITabBarController <UITabBarControllerDelegate>

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with an Optional nib and bundle.
///
/// \param nibNameOrNil An Optional String for the nib.
///
/// \param bundle An Optional NSBundle where the nib is located.
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)layoutSubviews;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;

/// Handles transitions when tabBarItems are pressed.
- (id <UIViewControllerAnimatedTransitioning> _Nullable)tabBarController:(UITabBarController * _Nonnull)tabBarController animationControllerForTransitionFromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC;
@end

@protocol UIViewControllerContextTransitioning;

SWIFT_CLASS("_TtC8Material41BottomNavigationFadeAnimatedTransitioning")
@interface BottomNavigationFadeAnimatedTransitioning : NSObject <UIViewControllerAnimatedTransitioning>
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material12BottomTabBar")
@interface BottomTabBar : UITabBar

/// Automatically aligns the BottomNavigationBar to the superview.
@property (nonatomic) BOOL autoLayoutToSuperview;

/// This property is the same as clipsToBounds. It crops any of the view's contents from bleeding past the view's frame. If an image is set using the image property, then this value does not need to be set, since the visualLayer's maskToBounds is set to true by default.
@property (nonatomic) BOOL masksToBounds;

/// A property that accesses the backing layer's backgroundColor.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// A property that accesses the layer.frame.origin.x property.
@property (nonatomic) CGFloat x;

/// A property that accesses the layer.frame.origin.y property.
@property (nonatomic) CGFloat y;

/// A property that accesses the layer.frame.size.width property. When setting this property in conjunction with the shape property having a value that is not .None, the height will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat width;

/// A property that accesses the layer.frame.size.height property. When setting this property in conjunction with the shape property having a value that is not .None, the width will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat height;

/// A property that accesses the backing layer's shadowColor.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;

/// A property that accesses the backing layer's shadowOffset.
@property (nonatomic) CGSize shadowOffset;

/// A property that accesses the backing layer's shadowOpacity.
@property (nonatomic) float shadowOpacity;

/// A property that accesses the backing layer's shadowRadius.
@property (nonatomic) CGFloat shadowRadius;

/// A property that accesses the layer.borderWith.
@property (nonatomic) CGFloat borderWidth;

/// A property that accesses the layer.borderColor property.
@property (nonatomic, strong) UIColor * _Nullable borderColor;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init() initializer.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSubviews;
- (void)didMoveToSuperview;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end


SWIFT_CLASS("_TtC8Material14CapturePreview")
@interface CapturePreview : MaterialView

/// :name:	layerClass
+ (Class _Nonnull)layerClass;

/// :name:	captureDevicePointOfInterestForPoint
- (CGPoint)captureDevicePointOfInterestForPoint:(CGPoint)point;

/// :name:	pointForCaptureDevicePointOfInterest
- (CGPoint)pointForCaptureDevicePointOfInterest:(CGPoint)point;

/// :name:	prepareView
- (void)prepareView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class AVCaptureDevice;
@class AVCaptureFileOutput;
@class NSURL;
@class NSError;
@protocol CaptureSessionDelegate;

SWIFT_CLASS_NAMED("CaptureSession")
@interface CaptureSession : NSObject <AVCaptureFileOutputRecordingDelegate>

/// :name:	isRunning
@property (nonatomic, readonly) BOOL isRunning;

/// :name:	isRecording
@property (nonatomic, readonly) BOOL isRecording;

/// :name:	recordedDuration
@property (nonatomic, readonly) CMTime recordedDuration;

/// :name:	activeCamera
@property (nonatomic, readonly, strong) AVCaptureDevice * _Nullable activeCamera;

/// :name:	inactiveCamera
@property (nonatomic, readonly, strong) AVCaptureDevice * _Nullable inactiveCamera;

/// :name:	cameraCount
@property (nonatomic, readonly) NSInteger cameraCount;

/// :name:	canSwitchCameras
@property (nonatomic, readonly) BOOL canSwitchCameras;

/// :name:	caneraSupportsTapToFocus
@property (nonatomic, readonly) BOOL cameraSupportsTapToFocus;

/// :name:	cameraSupportsTapToExpose
@property (nonatomic, readonly) BOOL cameraSupportsTapToExpose;

/// :name:	cameraHasFlash
@property (nonatomic, readonly) BOOL cameraHasFlash;

/// :name:	cameraHasTorch
@property (nonatomic, readonly) BOOL cameraHasTorch;

/// :name:	focusMode
@property (nonatomic) AVCaptureFocusMode focusMode;

/// :name:	flashMode
@property (nonatomic) AVCaptureFlashMode flashMode;

/// :name:	torchMode
@property (nonatomic) AVCaptureTorchMode torchMode;

/// The capture video orientation.
@property (nonatomic, readonly) AVCaptureVideoOrientation videoOrientation;

/// A delegation property for CaptureSessionDelegate.
@property (nonatomic, weak) id <CaptureSessionDelegate> _Nullable delegate;

/// Initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Starts the session.
- (void)startSession;

/// Stops the session.
- (void)stopSession;

/// Switches the camera if possible.
- (void)switchCameras;

/// :name:	isFocusModeSupported
- (BOOL)isFocusModeSupported:(AVCaptureFocusMode)focusMode;

/// :name:	isExposureModeSupported
- (BOOL)isExposureModeSupported:(AVCaptureExposureMode)exposureMode;

/// :name:	isFlashModeSupported
- (BOOL)isFlashModeSupported:(AVCaptureFlashMode)flashMode;

/// :name:	isTorchModeSupported
- (BOOL)isTorchModeSupported:(AVCaptureTorchMode)torchMode;

/// :name:	focusAtPoint
- (void)focusAtPoint:(CGPoint)point;

/// :name:	exposeAtPoint
- (void)exposeAtPoint:(CGPoint)point;

/// :name:	observeValueForKeyPath
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSString *, id> * _Nullable)change context:(void * _Null_unspecified)context;

/// :name:	resetFocusAndExposureModes
- (void)resetFocusAndExposureModes;

/// :name:	captureStillImage
- (void)captureStillImage;

/// :name:	startRecording
- (void)startRecording;

/// :name:	stopRecording
- (void)stopRecording;

/// :name:	captureOutput
- (void)captureOutput:(AVCaptureFileOutput * _Null_unspecified)captureOutput didStartRecordingToOutputFileAtURL:(NSURL * _Null_unspecified)fileURL fromConnections:(NSArray * _Null_unspecified)connections;

/// :name:	captureOutput
- (void)captureOutput:(AVCaptureFileOutput * _Null_unspecified)captureOutput didFinishRecordingToOutputFileAtURL:(NSURL * _Null_unspecified)outputFileURL fromConnections:(NSArray * _Null_unspecified)connections error:(NSError * _Null_unspecified)error;
@end


SWIFT_PROTOCOL_NAMED("CaptureSessionDelegate")
@protocol CaptureSessionDelegate
@optional

/// :name:	captureSessionFailedWithError
- (void)captureSessionFailedWithError:(CaptureSession * _Nonnull)capture error:(NSError * _Nonnull)error;

/// :name:	captureSessionDidSwitchCameras
- (void)captureSessionDidSwitchCameras:(CaptureSession * _Nonnull)capture position:(AVCaptureDevicePosition)position;

/// :name:	captureSessionWillSwitchCameras
- (void)captureSessionWillSwitchCameras:(CaptureSession * _Nonnull)capture position:(AVCaptureDevicePosition)position;

/// :name:	captureStillImageAsynchronously
- (void)captureStillImageAsynchronously:(CaptureSession * _Nonnull)capture image:(UIImage * _Nonnull)image;

/// :name:	captureStillImageAsynchronouslyFailedWithError
- (void)captureStillImageAsynchronouslyFailedWithError:(CaptureSession * _Nonnull)capture error:(NSError * _Nonnull)error;

/// :name:	captureCreateMovieFileFailedWithError
- (void)captureCreateMovieFileFailedWithError:(CaptureSession * _Nonnull)capture error:(NSError * _Nonnull)error;

/// :name:	captureMovieFailedWithError
- (void)captureMovieFailedWithError:(CaptureSession * _Nonnull)capture error:(NSError * _Nonnull)error;

/// :name:	captureDidStartRecordingToOutputFileAtURL
- (void)captureDidStartRecordingToOutputFileAtURL:(CaptureSession * _Nonnull)capture captureOutput:(AVCaptureFileOutput * _Nonnull)captureOutput fileURL:(NSURL * _Nonnull)fileURL fromConnections:(NSArray * _Nonnull)connections;

/// :name:	captureDidFinishRecordingToOutputFileAtURL
- (void)captureDidFinishRecordingToOutputFileAtURL:(CaptureSession * _Nonnull)capture captureOutput:(AVCaptureFileOutput * _Nonnull)captureOutput outputFileURL:(NSURL * _Nonnull)outputFileURL fromConnections:(NSArray * _Nonnull)connections error:(NSError * _Null_unspecified)error;
@end

@class MaterialLayer;
@class UIButton;

SWIFT_CLASS("_TtC8Material11CaptureView")
@interface CaptureView : MaterialView <UIGestureRecognizerDelegate>

/// :name:	tapToFocusEnabled
@property (nonatomic) BOOL tapToFocusEnabled;

/// :name:	tapToExposeEnabled
@property (nonatomic) BOOL tapToExposeEnabled;

/// :name:	tapToResetEnabled
@property (nonatomic) BOOL tapToResetEnabled;

/// :name:	contentInset
@property (nonatomic) UIEdgeInsets contentInset;

/// :name:	previewView
@property (nonatomic, readonly, strong) CapturePreview * _Nonnull previewView;

/// :name:	capture
@property (nonatomic, readonly, strong) CaptureSession * _Nonnull captureSession;

/// :name:	focusLayer
@property (nonatomic, readonly, strong) MaterialLayer * _Nullable focusLayer;

/// :name:	exposureLayer
@property (nonatomic, readonly, strong) MaterialLayer * _Nullable exposureLayer;

/// :name:	resetLayer
@property (nonatomic, readonly, strong) MaterialLayer * _Nullable resetLayer;

/// :name:	cameraButton
@property (nonatomic, strong) UIButton * _Nullable cameraButton;

/// :name:	captureButton
@property (nonatomic, strong) UIButton * _Nullable captureButton;

/// :name:	videoButton
@property (nonatomic, strong) UIButton * _Nullable videoButton;

/// :name:	switchCamerasButton
@property (nonatomic, strong) UIButton * _Nullable switchCamerasButton;

/// :name:	flashButton
@property (nonatomic, strong) UIButton * _Nullable flashButton;

/// :name:	init
- (nonnull instancetype)init;

/// :name:	layoutSubviews
- (void)layoutSubviews;

/// :name:	prepareView
- (void)prepareView;

/// :name:	reloadView
- (void)reloadView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("MaterialDelegate")
@protocol MaterialDelegate
@end


SWIFT_PROTOCOL_NAMED("CaptureViewDelegate")
@protocol CaptureViewDelegate <MaterialDelegate>
@optional

/// :name:	captureViewDidStartRecordTimer
- (void)captureViewDidStartRecordTimer:(CaptureView * _Nonnull)captureView;

/// :name:	captureViewDidUpdateRecordTimer
- (void)captureViewDidUpdateRecordTimer:(CaptureView * _Nonnull)captureView hours:(NSInteger)hours minutes:(NSInteger)minutes seconds:(NSInteger)seconds;

/// :name:	captureViewDidStopRecordTimer
- (void)captureViewDidStopRecordTimer:(CaptureView * _Nonnull)captureView hours:(NSInteger)hours minutes:(NSInteger)minutes seconds:(NSInteger)seconds;

/// :name:	captureViewDidTapToFocusAtPoint
- (void)captureViewDidTapToFocusAtPoint:(CaptureView * _Nonnull)captureView point:(CGPoint)point;

/// :name:	captureViewDidTapToExposeAtPoint
- (void)captureViewDidTapToExposeAtPoint:(CaptureView * _Nonnull)captureView point:(CGPoint)point;

/// :name:	captureViewDidTapToResetAtPoint
- (void)captureViewDidTapToResetAtPoint:(CaptureView * _Nonnull)captureView point:(CGPoint)point;

/// :name:	captureViewDidPressFlashButton
- (void)captureViewDidPressFlashButton:(CaptureView * _Nonnull)captureView button:(UIButton * _Nonnull)button;

/// :name:	captureViewDidPressSwitchCamerasButton
- (void)captureViewDidPressSwitchCamerasButton:(CaptureView * _Nonnull)captureView button:(UIButton * _Nonnull)button;

/// :name:	captureViewDidPressCaptureButton
- (void)captureViewDidPressCaptureButton:(CaptureView * _Nonnull)captureView button:(UIButton * _Nonnull)button;

/// :name:	captureViewDidPressCameraButton
- (void)captureViewDidPressCameraButton:(CaptureView * _Nonnull)captureView button:(UIButton * _Nonnull)button;

/// :name:	captureViewDidPressVideoButton
- (void)captureViewDidPressVideoButton:(CaptureView * _Nonnull)captureView button:(UIButton * _Nonnull)button;
@end

@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC8Material17MaterialPulseView")
@interface MaterialPulseView : MaterialView

/// An Array of pulse layers.
@property (nonatomic, readonly, copy) NSArray<CAShapeLayer *> * _Nonnull pulseLayers;

/// The opcaity value for the pulse animation.
@property (nonatomic) CGFloat pulseOpacity;

/// The color of the pulse effect.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;

/// A delegation method that is executed when the view has began a touch event.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// A delegation method that is executed when the view touch event has ended.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// A delegation method that is executed when the view touch event has been cancelled.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;

SWIFT_CLASS("_TtC8Material8CardView")
@interface CardView : MaterialPulseView

/// :name:	dividerColor
@property (nonatomic, strong) UIColor * _Nullable dividerColor;

/// :name:	divider
@property (nonatomic) BOOL divider;

/// :name:	dividerInset
@property (nonatomic) UIEdgeInsets dividerInset;

/// :name:	contentInset
@property (nonatomic) UIEdgeInsets contentInset;

/// :name:	titleLabelInset
@property (nonatomic) UIEdgeInsets titleLabelInset;

/// :name:	titleLabel
@property (nonatomic, strong) UILabel * _Nullable titleLabel;

/// :name:	contentViewInset
@property (nonatomic) UIEdgeInsets contentViewInset;

/// :name:	contentView
@property (nonatomic, strong) UIView * _Nullable contentView;

/// :name:	leftButtonsInset
@property (nonatomic) UIEdgeInsets leftButtonsInset;

/// :name:	leftButtons
@property (nonatomic, copy) NSArray<UIButton *> * _Nullable leftButtons;

/// :name:	rightButtonsInset
@property (nonatomic) UIEdgeInsets rightButtonsInset;

/// :name:	rightButtons
@property (nonatomic, copy) NSArray<UIButton *> * _Nullable rightButtons;

/// :name:	init
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :name:	init
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :name:	init
- (nonnull instancetype)init;

/// :name:	init
- (nullable instancetype)initWithImage:(UIImage * _Nullable)image titleLabel:(UILabel * _Nullable)titleLabel contentView:(UIView * _Nullable)contentView leftButtons:(NSArray<UIButton *> * _Nullable)leftButtons rightButtons:(NSArray<UIButton *> * _Nullable)rightButtons;

/// :name:	layoutSublayersOfLayer
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;

/// :name:	reloadView
- (void)reloadView;

/// :name:	prepareView
- (void)prepareView;
@end


@class UIFont;
@class IconButton;

SWIFT_CLASS("_TtC8Material9TextField")
@interface TextField : UITextField

/// A Boolean that indicates if the TextField is in an animating state.
@property (nonatomic, readonly) BOOL animating;

/// This property is the same as clipsToBounds. It crops any of the view's contents from bleeding past the view's frame.
@property (nonatomic) BOOL masksToBounds;

/// A property that accesses the backing layer's backgroundColor.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// A property that accesses the layer.frame.origin.x property.
@property (nonatomic) CGFloat x;

/// A property that accesses the layer.frame.origin.y property.
@property (nonatomic) CGFloat y;

/// A property that accesses the layer.frame.size.width property.
@property (nonatomic) CGFloat width;

/// A property that accesses the layer.frame.size.height property.
@property (nonatomic) CGFloat height;

/// A property that accesses the layer.position property.
@property (nonatomic) CGPoint position;

/// A property that accesses the layer.zPosition property.
@property (nonatomic) CGFloat zPosition;

/// Reference to the divider.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull divider;

/// Divider height.
@property (nonatomic) CGFloat dividerHeight;

/// Divider active state height.
@property (nonatomic) CGFloat dividerActiveHeight;

/// Sets the divider.
@property (nonatomic, strong) UIColor * _Nonnull dividerColor;

/// Sets the divider.
@property (nonatomic, strong) UIColor * _Nullable dividerActiveColor;

/// The placeholderLabel font value.
@property (nonatomic, strong) UIFont * _Nullable font;

/// TextField's text property observer.
@property (nonatomic, copy) NSString * _Nullable text;

/// The placeholderLabel text value.
@property (nonatomic, copy) NSString * _Nullable placeholder;

/// The placeholder UILabel.
@property (nonatomic, readonly, strong) UILabel * _Nonnull placeholderLabel;

/// Placeholder textColor.
@property (nonatomic, strong) UIColor * _Nonnull placeholderColor;

/// Placeholder active textColor.
@property (nonatomic, strong) UIColor * _Nonnull placeholderActiveColor;

/// This property adds a padding to placeholder y position animation
@property (nonatomic) CGFloat placeholderVerticalOffset;

/// The detailLabel UILabel that is displayed.
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;

/// The detailLabel text value.
@property (nonatomic, copy) NSString * _Nullable detail;

/// Detail textColor.
@property (nonatomic, strong) UIColor * _Nonnull detailColor;

/// Vertical distance for the detailLabel from the divider.
@property (nonatomic) CGFloat detailVerticalOffset;

/// Handles the textAlignment of the placeholderLabel.
@property (nonatomic) NSTextAlignment textAlignment;

/// Enables the clearIconButton.
@property (nonatomic) BOOL enableClearIconButton;

/// Enables the automatic handling of the clearIconButton.
@property (nonatomic) BOOL clearIconButtonAutoHandle;

/// Enables the visibilityIconButton.
@property (nonatomic) BOOL enableVisibilityIconButton;

/// Enables the automatic handling of the visibilityIconButton.
@property (nonatomic) BOOL visibilityIconButtonAutoHandle;

/// A reference to the clearIconButton.
@property (nonatomic, readonly, strong) IconButton * _Nullable clearIconButton;

/// A reference to the visibilityIconButton.
@property (nonatomic, readonly, strong) IconButton * _Nullable visibilityIconButton;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init() initializer.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSubviews;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;

/// Default size when using AutoLayout.
- (CGSize)intrinsicContentSize;

/// A method that accepts CAAnimation objects and executes them on the view's backing layer.
///
/// \param animation A CAAnimation instance.
- (void)animate:(CAAnimation * _Nonnull)animation;

/// A delegation method that is executed when the backing layer starts running an animation.
///
/// \param anim The currently running CAAnimation instance.
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;

/// A delegation method that is executed when the backing layer stops running an animation.
///
/// \param anim The CAAnimation instance that stopped running.
///
/// \param flag A boolean that indicates if the animation stopped
/// because it was completed or interrupted. True if completed, false
/// if interrupted.
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;

/// Handles the text editing did begin state.
- (void)handleEditingDidBegin;

/// Handles the text editing did end state.
- (void)handleEditingDidEnd;

/// Handles the clearIconButton TouchUpInside event.
- (void)handleClearIconButton;

/// Handles the visibilityIconButton TouchUpInside event.
- (void)handleVisibilityIconButton;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;

/// Ensures that the components are sized correctly.
- (void)layoutToSize;

/// Layout the divider.
- (void)layoutDivider;

/// Layout the placeholderLabel.
- (void)layoutPlaceholderLabel;

/// Layout the detailLabel.
- (void)layoutDetailLabel;

/// Layout the clearIconButton.
- (void)layoutClearIconButton;

/// Layout the visibilityIconButton.
- (void)layoutVisibilityIconButton;

/// The animation for the divider when editing begins.
- (void)dividerEditingDidBeginAnimation;

/// The animation for the divider when editing ends.
- (void)dividerEditingDidEndAnimation;

/// The animation for the placeholder when editing begins.
- (void)placeholderEditingDidBeginAnimation;

/// The animation for the placeholder when editing ends.
- (void)placeholderEditingDidEndAnimation;
@end


SWIFT_CLASS("_TtC8Material14ErrorTextField")
@interface ErrorTextField : TextField

/// Controls the visibility of detailLabel
@property (nonatomic) BOOL revealError;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("MaterialButton")
@interface MaterialButton : UIButton

/// A CAShapeLayer used to manage elements that would be affected by the clipToBounds property of the backing layer. For example, this allows the dropshadow effect on the backing layer, while clipping the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;

/// A base delegate reference used when subclassing MaterialView.
@property (nonatomic, weak) id <MaterialDelegate> _Nullable delegate;

/// An Array of pulse layers.
@property (nonatomic, readonly, copy) NSArray<CAShapeLayer *> * _Nonnull pulseLayers;

/// The opacity value for the pulse animation.
@property (nonatomic) CGFloat pulseOpacity;

/// The color of the pulse effect.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;

/// This property is the same as clipsToBounds. It crops any of the view's contents from bleeding past the view's frame. If an image is set using the image property, then this value does not need to be set, since the visualLayer's maskToBounds is set to true by default.
@property (nonatomic) BOOL masksToBounds;

/// A property that accesses the backing layer's backgroundColor.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// A property that accesses the layer.frame.origin.x property.
@property (nonatomic) CGFloat x;

/// A property that accesses the layer.frame.origin.y property.
@property (nonatomic) CGFloat y;

/// A property that accesses the layer.frame.size.width property. When setting this property in conjunction with the shape property having a value that is not .None, the height will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat width;

/// A property that accesses the layer.frame.size.height property. When setting this property in conjunction with the shape property having a value that is not .None, the width will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat height;

/// A property that accesses the backing layer's shadowColor.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;

/// A property that accesses the backing layer's shadowOffset.
@property (nonatomic) CGSize shadowOffset;

/// A property that accesses the backing layer's shadowOpacity.
@property (nonatomic) float shadowOpacity;

/// A property that accesses the backing layer's shadowRadius.
@property (nonatomic) CGFloat shadowRadius;

/// A property that accesses the backing layer's shadowPath.
@property (nonatomic) CGPathRef _Nullable shadowPath;

/// Enables automatic shadowPath sizing.
@property (nonatomic) BOOL shadowPathAutoSizeEnabled;

/// A property that accesses the layer.cornerRadius.
@property (nonatomic) CGFloat cornerRadius;

/// A property that accesses the layer.borderWith.
@property (nonatomic) CGFloat borderWidth;

/// A property that accesses the layer.borderColor property.
@property (nonatomic, strong) UIColor * _Nullable borderColor;

/// A property that accesses the layer.position property.
@property (nonatomic) CGPoint position;

/// A property that accesses the layer.zPosition property.
@property (nonatomic) CGFloat zPosition;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init() initializer.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;
- (UIEdgeInsets)alignmentRectInsets;

/// A method that accepts CAAnimation objects and executes them on the view's backing layer.
///
/// \param animation A CAAnimation instance.
- (void)animate:(CAAnimation * _Nonnull)animation;

/// A delegation method that is executed when the backing layer starts running an animation.
///
/// \param anim The currently running CAAnimation instance.
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;

/// A delegation method that is executed when the backing layer stops running an animation.
///
/// \param anim The CAAnimation instance that stopped running.
///
/// \param flag A boolean that indicates if the animation stopped
/// because it was completed or interrupted. True if completed, false
/// if interrupted.
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;

/// A delegation method that is executed when the view has began a touch event.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// A delegation method that is executed when the view touch event has ended.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// A delegation method that is executed when the view touch event has been cancelled.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end


SWIFT_CLASS("_TtC8Material9FabButton")
@interface FabButton : MaterialButton

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material10FlatButton")
@interface FlatButton : MaterialButton

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material10IconButton")
@interface IconButton : MaterialButton

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material13ImageCardView")
@interface ImageCardView : MaterialPulseView

/// :name:	dividerColor
@property (nonatomic, strong) UIColor * _Nullable dividerColor;

/// :name:	divider
@property (nonatomic) BOOL divider;

/// :name:	dividerInset
@property (nonatomic) UIEdgeInsets dividerInset;

/// :name:	imageLayer
@property (nonatomic, readonly, strong) CAShapeLayer * _Nullable imageLayer;

/// :name:	image
@property (nonatomic, strong) UIImage * _Nullable image;

/// :name:	maxImageHeight
@property (nonatomic) CGFloat maxImageHeight;

/// :name:	contentsRect
@property (nonatomic) CGRect contentsRect;

/// :name:	contentsCenter
@property (nonatomic) CGRect contentsCenter;

/// :name:	contentsScale
@property (nonatomic) CGFloat contentsScale;

/// Determines how content should be aligned within the visualLayer's bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;

/// :name:	contentInset
@property (nonatomic) UIEdgeInsets contentInset;

/// :name:	titleLabelInset
@property (nonatomic) UIEdgeInsets titleLabelInset;

/// :name:	titleLabel
@property (nonatomic, strong) UILabel * _Nullable titleLabel;

/// :name:	contentViewInset
@property (nonatomic) UIEdgeInsets contentViewInset;

/// :name:	contentView
@property (nonatomic, strong) UIView * _Nullable contentView;

/// :name:	leftButtonsInset
@property (nonatomic) UIEdgeInsets leftButtonsInset;

/// :name:	leftButtons
@property (nonatomic, copy) NSArray<UIButton *> * _Nullable leftButtons;

/// :name:	rightButtonsInset
@property (nonatomic) UIEdgeInsets rightButtonsInset;

/// :name:	rightButtons
@property (nonatomic, copy) NSArray<UIButton *> * _Nullable rightButtons;

/// :name:	init
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :name:	init
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :name:	init
- (nonnull instancetype)init;

/// :name:	init
- (nullable instancetype)initWithImage:(UIImage * _Nullable)image titleLabel:(UILabel * _Nullable)titleLabel contentView:(UIView * _Nullable)contentView leftButtons:(NSArray<UIButton *> * _Nullable)leftButtons rightButtons:(NSArray<UIButton *> * _Nullable)rightButtons;

/// :name:	layoutSublayersOfLayer
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;

/// :name:	reloadView
- (void)reloadView;

/// :name:	prepareView
- (void)prepareView;
@end


SWIFT_PROTOCOL_NAMED("MaterialAnimationDelegate")
@protocol MaterialAnimationDelegate <MaterialDelegate>
@optional
- (void)materialAnimationDidStart:(CAAnimation * _Nonnull)animation;
- (void)materialAnimationDidStop:(CAAnimation * _Nonnull)animation finished:(BOOL)flag;
@end



SWIFT_CLASS_NAMED("MaterialCollectionReusableView")
@interface MaterialCollectionReusableView : UICollectionReusableView

/// A CAShapeLayer used to manage elements that would be affected by the clipToBounds property of the backing layer. For example, this allows the dropshadow effect on the backing layer, while clipping the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;

/// A base delegate reference used when subclassing MaterialView.
@property (nonatomic, weak) id <MaterialDelegate> _Nullable delegate;

/// An Array of pulse layers.
@property (nonatomic, readonly, copy) NSArray<CAShapeLayer *> * _Nonnull pulseLayers;

/// The opcaity value for the pulse animation.
@property (nonatomic) CGFloat pulseOpacity;

/// The color of the pulse effect.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;

/// A property that manages an image for the visualLayer's contents property. Images should not be set to the backing layer's contents property to avoid conflicts when using clipsToBounds.
@property (nonatomic, strong) UIImage * _Nullable image;

/// Allows a relative subrectangle within the range of 0 to 1 to be specified for the visualLayer's contents property. This allows much greater flexibility than the contentsGravity property in terms of how the image is cropped and stretched.
@property (nonatomic) CGRect contentsRect;

/// A CGRect that defines a stretchable region inside the visualLayer with a fixed border around the edge.
@property (nonatomic) CGRect contentsCenter;

/// A floating point value that defines a ratio between the pixel dimensions of the visualLayer's contents property and the size of the view. By default, this value is set to the MaterialDevice.scale.
@property (nonatomic) CGFloat contentsScale;

/// Determines how content should be aligned within the visualLayer's bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;

/// A wrapper around grid.contentInset.
@property (nonatomic) UIEdgeInsets contentInset;

/// A wrapper around grid.spacing.
@property (nonatomic) CGFloat spacing;

/// This property is the same as clipsToBounds. It crops any of the view's contents from bleeding past the view's frame. If an image is set using the image property, then this value does not need to be set, since the visualLayer's maskToBounds is set to true by default.
@property (nonatomic) BOOL masksToBounds;

/// A property that accesses the backing layer's backgroundColor.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// A property that accesses the layer.frame.origin.x property.
@property (nonatomic) CGFloat x;

/// A property that accesses the layer.frame.origin.y property.
@property (nonatomic) CGFloat y;

/// A property that accesses the layer.frame.size.width property. When setting this property in conjunction with the shape property having a value that is not .None, the height will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat width;

/// A property that accesses the layer.frame.size.height property. When setting this property in conjunction with the shape property having a value that is not .None, the width will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat height;

/// A property that accesses the backing layer's shadowColor.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;

/// A property that accesses the backing layer's shadowOffset.
@property (nonatomic) CGSize shadowOffset;

/// A property that accesses the backing layer's shadowOpacity.
@property (nonatomic) float shadowOpacity;

/// A property that accesses the backing layer's shadowRadius.
@property (nonatomic) CGFloat shadowRadius;

/// A property that accesses the backing layer's shadowPath.
@property (nonatomic) CGPathRef _Nullable shadowPath;

/// Enables automatic shadowPath sizing.
@property (nonatomic) BOOL shadowPathAutoSizeEnabled;

/// A property that accesses the layer.cornerRadius.
@property (nonatomic) CGFloat cornerRadius;

/// A property that accesses the layer.borderWith.
@property (nonatomic) CGFloat borderWidth;

/// A property that accesses the layer.borderColor property.
@property (nonatomic, strong) UIColor * _Nullable borderColor;

/// A property that accesses the layer.position property.
@property (nonatomic) CGPoint position;

/// A property that accesses the layer.zPosition property.
@property (nonatomic) CGFloat zPosition;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init() initializer.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;

/// A method that accepts CAAnimation objects and executes them on the view's backing layer.
///
/// \param animation A CAAnimation instance.
- (void)animate:(CAAnimation * _Nonnull)animation;

/// A delegation method that is executed when the backing layer starts running an animation.
///
/// \param anim The currently running CAAnimation instance.
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;

/// A delegation method that is executed when the backing layer stops running an animation.
///
/// \param anim The CAAnimation instance that stopped running.
///
/// \param flag A boolean that indicates if the animation stopped
/// because it was completed or interrupted. True if completed, false
/// if interrupted.
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;

/// A delegation method that is executed when the view has began a touch event.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// A delegation method that is executed when the view touch event has ended.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// A delegation method that is executed when the view touch event has been cancelled.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end

@class UICollectionViewLayout;

SWIFT_CLASS("_TtC8Material22MaterialCollectionView")
@interface MaterialCollectionView : UICollectionView

/// A property that accesses the layer.frame.origin.x property.
@property (nonatomic) CGFloat x;

/// A property that accesses the layer.frame.origin.y property.
@property (nonatomic) CGFloat y;

/// A property that accesses the layer.frame.size.width property.
@property (nonatomic) CGFloat width;

/// A property that accesses the layer.frame.size.height property.
@property (nonatomic) CGFloat height;
@property (nonatomic) UIEdgeInsets contentInset;

/// Scroll direction.
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;

/// Spacing between items.
@property (nonatomic) CGFloat spacing;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object.
///
/// \param frame A CGRect defining the view's frame.
///
/// \param collectionViewLayout A UICollectionViewLayout reference.
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object.
///
/// \param frame A CGRect defining the view's frame.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer that initializes the object.
- (nonnull instancetype)init;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end


SWIFT_CLASS_NAMED("MaterialCollectionViewCell")
@interface MaterialCollectionViewCell : UICollectionViewCell

/// A CAShapeLayer used to manage elements that would be affected by the clipToBounds property of the backing layer. For example, this allows the dropshadow effect on the backing layer, while clipping the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;

/// A base delegate reference used when subclassing MaterialView.
@property (nonatomic, weak) id <MaterialDelegate> _Nullable delegate;

/// An Array of pulse layers.
@property (nonatomic, readonly, copy) NSArray<CAShapeLayer *> * _Nonnull pulseLayers;

/// The opcaity value for the pulse animation.
@property (nonatomic) CGFloat pulseOpacity;

/// The color of the pulse effect.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;

/// A property that manages an image for the visualLayer's contents property. Images should not be set to the backing layer's contents property to avoid conflicts when using clipsToBounds.
@property (nonatomic, strong) UIImage * _Nullable image;

/// Allows a relative subrectangle within the range of 0 to 1 to be specified for the visualLayer's contents property. This allows much greater flexibility than the contentsGravity property in terms of how the image is cropped and stretched.
@property (nonatomic) CGRect contentsRect;

/// A CGRect that defines a stretchable region inside the visualLayer with a fixed border around the edge.
@property (nonatomic) CGRect contentsCenter;

/// A floating point value that defines a ratio between the pixel dimensions of the visualLayer's contents property and the size of the view. By default, this value is set to the MaterialDevice.scale.
@property (nonatomic) CGFloat contentsScale;

/// Determines how content should be aligned within the visualLayer's bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;

/// A wrapper around grid.contentInset.
@property (nonatomic) UIEdgeInsets contentInset;

/// A wrapper around grid.spacing.
@property (nonatomic) CGFloat spacing;

/// This property is the same as clipsToBounds. It crops any of the view's contents from bleeding past the view's frame. If an image is set using the image property, then this value does not need to be set, since the visualLayer's maskToBounds is set to true by default.
@property (nonatomic) BOOL masksToBounds;

/// A property that accesses the backing layer's backgroundColor.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// A property that accesses the layer.frame.origin.x property.
@property (nonatomic) CGFloat x;

/// A property that accesses the layer.frame.origin.y property.
@property (nonatomic) CGFloat y;

/// A property that accesses the layer.frame.size.width property. When setting this property in conjunction with the shape property having a value that is not .None, the height will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat width;

/// A property that accesses the layer.frame.size.height property. When setting this property in conjunction with the shape property having a value that is not .None, the width will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat height;

/// A property that accesses the backing layer's shadowColor.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;

/// A property that accesses the backing layer's shadowOffset.
@property (nonatomic) CGSize shadowOffset;

/// A property that accesses the backing layer's shadowOpacity.
@property (nonatomic) float shadowOpacity;

/// A property that accesses the backing layer's shadowRadius.
@property (nonatomic) CGFloat shadowRadius;

/// A property that accesses the backing layer's shadowPath.
@property (nonatomic) CGPathRef _Nullable shadowPath;

/// Enables automatic shadowPath sizing.
@property (nonatomic) BOOL shadowPathAutoSizeEnabled;

/// A property that accesses the layer.cornerRadius.
@property (nonatomic) CGFloat cornerRadius;

/// A property that accesses the layer.borderWith.
@property (nonatomic) CGFloat borderWidth;

/// A property that accesses the layer.borderColor property.
@property (nonatomic, strong) UIColor * _Nullable borderColor;

/// A property that accesses the layer.position property.
@property (nonatomic) CGPoint position;

/// A property that accesses the layer.zPosition property.
@property (nonatomic) CGFloat zPosition;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init() initializer.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer.
- (nonnull instancetype)init;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;

/// A method that accepts CAAnimation objects and executes them on the view's backing layer.
///
/// \param animation A CAAnimation instance.
- (void)animate:(CAAnimation * _Nonnull)animation;

/// A delegation method that is executed when the backing layer starts running an animation.
///
/// \param anim The currently running CAAnimation instance.
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;

/// A delegation method that is executed when the backing layer stops running an animation.
///
/// \param anim The CAAnimation instance that stopped running.
///
/// \param flag A boolean that indicates if the animation stopped
/// because it was completed or interrupted. True if completed, false
/// if interrupted.
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;

/// A delegation method that is executed when the view has began a touch event.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// A delegation method that is executed when the view touch event has ended.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// A delegation method that is executed when the view touch event has been cancelled.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end

@class NSIndexPath;
@class UICollectionViewLayoutAttributes;

SWIFT_CLASS("_TtC8Material28MaterialCollectionViewLayout")
@interface MaterialCollectionViewLayout : UICollectionViewLayout

/// The size of items.
@property (nonatomic) CGSize itemSize;

/// A wrapper around grid.contentInset.
@property (nonatomic) UIEdgeInsets contentInset;

/// Size of the content.
@property (nonatomic, readonly) CGSize contentSize;

/// Scroll direction.
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;

/// Spacing between items.
@property (nonatomic) CGFloat spacing;

/// Retrieves the index paths for the items within the passed in CGRect.
///
/// \param rect A CGRect that acts as the bounds to find the items within.
///
/// \returns  An Array of NSIndexPath objects.
- (NSArray<NSIndexPath *> * _Nonnull)indexPathsOfItemsInRect:(CGRect)rect;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds;
- (CGSize)collectionViewContentSize;
- (void)prepareLayout;
- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@class MaterialTextLayer;

SWIFT_CLASS("_TtC8Material13MaterialLabel")
@interface MaterialLabel : UILabel

/// :name:	layerClass
+ (Class _Nonnull)layerClass;

/// :name:	textLayer
@property (nonatomic, readonly, strong) MaterialTextLayer * _Nonnull textLayer;

/// :name:	text
@property (nonatomic, copy) NSString * _Nullable text;

/// :name:	textColor
@property (nonatomic, strong) UIColor * _Nullable textColor;

/// :name:	font
@property (nonatomic, strong) UIFont * _Null_unspecified font;

/// :name:	textAlignment
@property (nonatomic) NSTextAlignment textAlignment;

/// :name:	wrapped
@property (nonatomic) BOOL wrapped;

/// :name:	contentsScale
@property (nonatomic) CGFloat contentsScale;

/// :name:	lineBreakMode
@property (nonatomic) NSLineBreakMode lineBreakMode;

/// :name:	init
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :name:	init
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// :name:	init
- (nonnull instancetype)init;

/// :name:	stringSize
- (CGSize)stringSizeWithConstrainedToWidth:(double)width;

/// :name:	prepareView
- (void)prepareView;
@end


SWIFT_CLASS_NAMED("MaterialLayer")
@interface MaterialLayer : CAShapeLayer

/// A CAShapeLayer used to manage elements that would be affected by the clipToBounds property of the backing layer. For example, this allows the dropshadow effect on the backing layer, while clipping the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;

/// A property that accesses the layer.frame.origin.x property.
@property (nonatomic) CGFloat x;

/// A property that accesses the layer.frame.origin.y property.
@property (nonatomic) CGFloat y;

/// A property that accesses the layer.frame.size.width property. When setting this property in conjunction with the shape property having a value that is not .None, the height will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat width;

/// A property that accesses the layer.frame.size.height property. When setting this property in conjunction with the shape property having a value that is not .None, the width will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat height;

/// A property that manages an image for the visualLayer's contents property. Images should not be set to the backing layer's contents property to avoid conflicts when using clipsToBounds.
@property (nonatomic, strong) UIImage * _Nullable image;

/// Allows a relative subrectangle within the range of 0 to 1 to be specified for the visualLayer's contents property. This allows much greater flexibility than the contentsGravity property in terms of how the image is cropped and stretched.
@property (nonatomic) CGRect contentsRect;

/// A CGRect that defines a stretchable region inside the visualLayer with a fixed border around the edge.
@property (nonatomic) CGRect contentsCenter;

/// A floating point value that defines a ratio between the pixel dimensions of the visualLayer's contents property and the size of the layer. By default, this value is set to the MaterialDevice.scale.
@property (nonatomic) CGFloat contentsScale;

/// Determines how content should be aligned within the visualLayer's bounds.
@property (nonatomic, copy) NSString * _Nonnull contentsGravity;

/// Enables automatic shadowPath sizing.
@property (nonatomic) BOOL shadowPathAutoSizeEnabled;

/// A property that sets the cornerRadius of the backing layer. If the shape property has a value of .Circle when the cornerRadius is set, it will become .None, as it no longer maintains its circle shape.
@property (nonatomic) CGFloat cornerRadius;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer the same as init(). The layer parameter is ignored to avoid crashes on certain architectures.
///
/// \param layer AnyObject.
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame;
- (void)layoutSublayers;

/// A method that accepts CAAnimation objects and executes.
///
/// \param animation A CAAnimation instance.
- (void)animate:(CAAnimation * _Nonnull)animation;

/// A delegation method that is executed when the layer starts running an animation.
///
/// \param anim The currently running CAAnimation instance.
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;

/// A delegation method that is executed when the layer stops running an animation.
///
/// \param anim The CAAnimation instance that stopped running.
///
/// \param flag A boolean that indicates if the animation stopped
/// because it was completed or interrupted. True if completed, false
/// if interrupted.
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;

/// Prepares the visualLayer property.
- (void)prepareVisualLayer;
@end


@protocol MaterialSwitchDelegate;

SWIFT_CLASS_NAMED("MaterialSwitch")
@interface MaterialSwitch : UIControl

/// A property that accesses the layer.frame.origin.x property.
@property (nonatomic) CGFloat x;

/// A property that accesses the layer.frame.origin.y property.
@property (nonatomic) CGFloat y;

/// A property that accesses the layer.frame.size.width property.
@property (nonatomic) CGFloat width;

/// A property that accesses the layer.frame.size.height property.
@property (nonatomic) CGFloat height;

/// An Optional delegation method.
@property (nonatomic, weak) id <MaterialSwitchDelegate> _Nullable delegate;

/// Indicates if the animation should bounce.
@property (nonatomic) BOOL bounceable;

/// Button on color.
@property (nonatomic, strong) UIColor * _Nonnull buttonOnColor;

/// Button off color.
@property (nonatomic, strong) UIColor * _Nonnull buttonOffColor;

/// Track on color.
@property (nonatomic, strong) UIColor * _Nonnull trackOnColor;

/// Track off color.
@property (nonatomic, strong) UIColor * _Nonnull trackOffColor;

/// Button on disabled color.
@property (nonatomic, strong) UIColor * _Nonnull buttonOnDisabledColor;

/// Track on disabled color.
@property (nonatomic, strong) UIColor * _Nonnull trackOnDisabledColor;

/// Button off disabled color.
@property (nonatomic, strong) UIColor * _Nonnull buttonOffDisabledColor;

/// Track off disabled color.
@property (nonatomic, strong) UIColor * _Nonnull trackOffDisabledColor;

/// Track view reference.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull trackLayer;

/// Button view reference.
@property (nonatomic, readonly, strong) FabButton * _Nonnull button;
@property (nonatomic, getter=isEnabled) BOOL enabled;

/// A boolean indicating if the switch is on or not.
@property (nonatomic) BOOL on;
@property (nonatomic) CGRect frame;
@property (nonatomic) CGRect bounds;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init(state:style:size:) initializer, or set the CGRect to CGRectNull.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (CGSize)intrinsicContentSize;

/// Toggle the MaterialSwitch state, if On will be Off, and if Off will be On.
///
/// \param completion An Optional completion block.
- (void)toggle:(void (^ _Nullable)(MaterialSwitch * _Nonnull control))completion;

/// Sets the switch on or off.
///
/// \param on A bool of whether the switch should be in the on state or not.
///
/// \param animated A Boolean indicating to set the animation or not.
- (void)setOn:(BOOL)on animated:(BOOL)animated completion:(void (^ _Nullable)(MaterialSwitch * _Nonnull control))completion;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


SWIFT_PROTOCOL_NAMED("MaterialSwitchDelegate")
@protocol MaterialSwitchDelegate

/// A MaterialSwitch delegate method for state changes.
///
/// \param control MaterialSwitch control.
- (void)materialSwitchStateChanged:(MaterialSwitch * _Nonnull)control;
@end


SWIFT_CLASS("_TtC8Material21MaterialTableViewCell")
@interface MaterialTableViewCell : UITableViewCell

/// A CAShapeLayer used to manage elements that would be affected by the clipToBounds property of the backing layer. For example, this allows the dropshadow effect on the backing layer, while clipping the image to a desired shape within the visualLayer.
@property (nonatomic, readonly, strong) CAShapeLayer * _Nonnull visualLayer;

/// A base delegate reference used when subclassing MaterialView.
@property (nonatomic, weak) id <MaterialDelegate> _Nullable delegate;

/// An Array of pulse layers.
@property (nonatomic, readonly, copy) NSArray<CAShapeLayer *> * _Nonnull pulseLayers;

/// The opcaity value for the pulse animation.
@property (nonatomic) CGFloat pulseOpacity;

/// The color of the pulse effect.
@property (nonatomic, strong) UIColor * _Nonnull pulseColor;

/// This property is the same as clipsToBounds. It crops any of the view's contents from bleeding past the view's frame. If an image is set using the image property, then this value does not need to be set, since the visualLayer's maskToBounds is set to true by default.
@property (nonatomic) BOOL masksToBounds;

/// A property that accesses the backing layer's backgroundColor.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// A property that accesses the layer.frame.origin.x property.
@property (nonatomic) CGFloat x;

/// A property that accesses the layer.frame.origin.y property.
@property (nonatomic) CGFloat y;

/// A property that accesses the layer.frame.size.width property. When setting this property in conjunction with the shape property having a value that is not .None, the height will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat width;

/// A property that accesses the layer.frame.size.height property. When setting this property in conjunction with the shape property having a value that is not .None, the width will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat height;

/// A property that accesses the backing layer's shadowColor.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;

/// A property that accesses the backing layer's shadowOffset.
@property (nonatomic) CGSize shadowOffset;

/// A property that accesses the backing layer's shadowOpacity.
@property (nonatomic) float shadowOpacity;

/// A property that accesses the backing layer's shadowRadius.
@property (nonatomic) CGFloat shadowRadius;

/// A property that accesses the backing layer's shadowPath.
@property (nonatomic) CGPathRef _Nullable shadowPath;

/// Enables automatic shadowPath sizing.
@property (nonatomic) BOOL shadowPathAutoSizeEnabled;

/// A property that accesses the layer.cornerRadius.
@property (nonatomic) CGFloat cornerRadius;

/// A property that accesses the layer.borderWith.
@property (nonatomic) CGFloat borderWidth;

/// A property that accesses the layer.borderColor property.
@property (nonatomic, strong) UIColor * _Nullable borderColor;

/// A property that accesses the layer.position property.
@property (nonatomic) CGPoint position;

/// A property that accesses the layer.zPosition property.
@property (nonatomic) CGFloat zPosition;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object.
///
/// \param style A UITableViewCellStyle enum.
///
/// \param reuseIdentifier A String identifier.
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Null_unspecified)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
- (void)layoutSubviews;

/// A method that accepts CAAnimation objects and executes them on the view's backing layer.
///
/// \param animation A CAAnimation instance.
- (void)animate:(CAAnimation * _Nonnull)animation;

/// A delegation method that is executed when the backing layer starts running an animation.
///
/// \param anim The currently running CAAnimation instance.
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;

/// A delegation method that is executed when the backing layer stops running an animation.
///
/// \param anim The CAAnimation instance that stopped running.
///
/// \param flag A boolean that indicates if the animation stopped
/// because it was completed or interrupted. True if completed, false
/// if interrupted.
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;

/// A delegation method that is executed when the view has began a touch event.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// A delegation method that is executed when the view touch event has ended.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;

/// A delegation method that is executed when the view touch event has been cancelled.
///
/// \param touches A set of UITouch objects.
///
/// \param event A UIEvent object.
- (void)touchesCancelled:(NSSet<UITouch *> * _Nullable)touches withEvent:(UIEvent * _Nullable)event;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end


SWIFT_CLASS("_TtC8Material17MaterialTextLayer")
@interface MaterialTextLayer : CATextLayer

/// :name:	fontType
@property (nonatomic, strong) UIFont * _Nullable fontType;

/// :name:	text
@property (nonatomic, copy) NSString * _Nullable text;

/// :name:	pointSize
@property (nonatomic) CGFloat pointSize;

/// :name:	textColor
@property (nonatomic, strong) UIColor * _Nullable textColor;

/// :name:	textAlignment
@property (nonatomic) NSTextAlignment textAlignment;

/// :name:	lineBreakMode
@property (nonatomic) NSLineBreakMode lineBreakMode;

/// :name:	x
@property (nonatomic) CGFloat x;

/// :name:	y
@property (nonatomic) CGFloat y;

/// :name:	width
@property (nonatomic) CGFloat width;

/// :name:	height
@property (nonatomic) CGFloat height;

/// :name: init
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// :name: init
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;

/// :name: init
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// :name: init
- (nonnull instancetype)initWithFrame:(CGRect)frame;

/// :name:	stringSize
- (CGSize)stringSizeWithConstrainedToWidth:(double)width;
@end



SWIFT_CLASS("_TtC8Material14RootController")
@interface RootController : UIViewController

/// Device status bar style.
@property (nonatomic) UIStatusBarStyle statusBarStyle;

/// A Boolean property used to enable and disable interactivity with the rootViewController.
@property (nonatomic) BOOL userInteractionEnabled;

/// A UIViewController property that references the active main UIViewController. To swap the rootViewController, it is recommended to use the transitionFromRootViewController helper method.
@property (nonatomic, readonly, strong) UIViewController * _Null_unspecified rootViewController;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with an Optional nib and bundle.
///
/// \param nibNameOrNil An Optional String for the nib.
///
/// \param bundle An Optional NSBundle where the nib is located.
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;

/// An initializer for the BarController.
///
/// \param rootViewController The main UIViewController.
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillLayoutSubviews;

/// A method to swap rootViewController objects.
///
/// \param toViewController The UIViewController to swap
/// with the active rootViewController.
///
/// \param duration A NSTimeInterval that sets the
/// animation duration of the transition.
///
/// \param options UIViewAnimationOptions thst are used
/// when animating the transition from the active rootViewController
/// to the toViewController.
///
/// \param animations An animation block that is executed during
/// the transition from the active rootViewController
/// to the toViewController.
///
/// \param completion A completion block that is execited after
/// the transition animation from the active rootViewController
/// to the toViewController has completed.
- (void)transitionFromRootViewController:(UIViewController * _Nonnull)toViewController duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^ _Nullable)(void))animations completion:(void (^ _Nullable)(BOOL))completion;

/// To execute in the order of the layout chain, override this method. LayoutSubviews should be called immediately, unless you have a certain need.
- (void)layoutSubviews;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end

@class MenuView;

SWIFT_CLASS("_TtC8Material14MenuController")
@interface MenuController : RootController

/// Reference to the MenuView.
@property (nonatomic, readonly, strong) MenuView * _Nonnull menuView;

/// Opens the menu with a callback.
///
/// \param completion An Optional callback that is executed when
/// all menu items have been opened.
- (void)openMenu:(void (^ _Nullable)(void))completion;

/// Closes the menu with a callback.
///
/// \param completion An Optional callback that is executed when
/// all menu items have been closed.
- (void)closeMenu:(void (^ _Nullable)(void))completion;

/// To execute in the order of the layout chain, override this method. LayoutSubviews should be called immediately, unless you have a certain need.
- (void)layoutSubviews;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material8MenuView")
@interface MenuView : MaterialPulseView

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;

/// Opens the menu with a callback.
///
/// \param completion An Optional callback that is executed when
/// all menu items have been opened.
- (void)open:(void (^ _Nullable)(void))completion;

/// Closes the menu with a callback.
///
/// \param completion An Optional callback that is executed when
/// all menu items have been closed.
- (void)close:(void (^ _Nullable)(void))completion;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("MenuViewDelegate")
@protocol MenuViewDelegate <MaterialDelegate>
@optional

/// Gets called when the user taps outside menu buttons.
- (void)menuViewDidTapOutside:(MenuView * _Nonnull)menuView;
@end

@class UINavigationItem;

SWIFT_CLASS("_TtC8Material13NavigationBar")
@interface NavigationBar : UINavigationBar

/// Will render the view.
@property (nonatomic, readonly) BOOL willRenderView;

/// A wrapper around grid.contentInset.
@property (nonatomic) UIEdgeInsets contentInset;

/// A wrapper around grid.spacing.
@property (nonatomic) CGFloat spacing;

/// Grid cell factor.
@property (nonatomic) CGFloat gridFactor;

/// The back button image writes to the backIndicatorImage property and backIndicatorTransitionMaskImage property.
@property (nonatomic, strong) UIImage * _Nullable backButtonImage;

/// This property is the same as clipsToBounds. It crops any of the view's contents from bleeding past the view's frame. If an image is set using the image property, then this value does not need to be set, since the visualLayer's maskToBounds is set to true by default.
@property (nonatomic) BOOL masksToBounds;

/// A property that accesses the backing layer's backgroundColor.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// A property that accesses the layer.frame.origin.x property.
@property (nonatomic) CGFloat x;

/// A property that accesses the layer.frame.origin.y property.
@property (nonatomic) CGFloat y;

/// A property that accesses the layer.frame.size.width property. When setting this property in conjunction with the shape property having a value that is not .None, the height will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat width;

/// A property that accesses the layer.frame.size.height property. When setting this property in conjunction with the shape property having a value that is not .None, the width will be adjusted to maintain the correct shape.
@property (nonatomic) CGFloat height;

/// A property that accesses the backing layer's shadowColor.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;

/// A property that accesses the backing layer's shadowOffset.
@property (nonatomic) CGSize shadowOffset;

/// A property that accesses the backing layer's shadowOpacity.
@property (nonatomic) float shadowOpacity;

/// A property that accesses the backing layer's shadowRadius.
@property (nonatomic) CGFloat shadowRadius;

/// A property that accesses the layer.borderWith.
@property (nonatomic) CGFloat borderWidth;

/// A property that accesses the layer.borderColor property.
@property (nonatomic, strong) UIColor * _Nullable borderColor;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init() initializer.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer.
- (nonnull instancetype)init;
- (CGSize)intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size;
- (void)layoutSubviews;
- (void)pushNavigationItem:(UINavigationItem * _Nonnull)item animated:(BOOL)animated;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end

@class UIGestureRecognizer;

SWIFT_CLASS("_TtC8Material20NavigationController")
@interface NavigationController : UINavigationController <UIGestureRecognizerDelegate>

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with an Optional nib and bundle.
///
/// \param nibNameOrNil An Optional String for the nib.
///
/// \param bundle An Optional NSBundle where the nib is located.
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a rootViewController.
///
/// \param rootViewController A UIViewController for the rootViewController.
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;

/// Detects the gesture recognizer being used. This is necessary when using NavigationDrawerController. It eliminates the conflict in panning.
///
/// \param gestureRecognizer A UIGestureRecognizer to detect.
///
/// \param touch The UITouch event.
///
/// \returns  A Boolean of whether to continue the gesture or not, true yes, false no.
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch;

/// Delegation method that is called when a new UINavigationItem is about to be pushed. This is used to prepare the transitions between UIViewControllers on the stack.
///
/// \param navigationBar A UINavigationBar that is used in the NavigationController.
///
/// \param item The UINavigationItem that will be pushed on the stack.
///
/// \returns  A Boolean value that indicates whether to push the item on to the stack or not.
/// True is yes, false is no.
- (BOOL)navigationBar:(UINavigationBar * _Nonnull)navigationBar shouldPushItem:(UINavigationItem * _Nonnull)item;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end

@protocol UIViewControllerTransitionCoordinator;
@protocol NavigationDrawerControllerDelegate;

SWIFT_CLASS_NAMED("NavigationDrawerController")
@interface NavigationDrawerController : RootController <UIGestureRecognizerDelegate>

/// A CGFloat property that accesses the leftView threshold of the NavigationDrawerController. When the panning gesture has ended, if the position is beyond the threshold, the leftView is opened, if it is below the threshold, the leftView is closed. The leftViewThreshold is always at half the width of the leftView.
@property (nonatomic) CGFloat leftThreshold;

/// A CGFloat property that accesses the rightView threshold of the NavigationDrawerController. When the panning gesture has ended, if the position is beyond the threshold, the rightView is closed, if it is below the threshold, the rightView is opened. The rightViewThreshold is always at half the width of the rightView.
@property (nonatomic) CGFloat rightThreshold;

/// A NavigationDrawerControllerDelegate property used to bind the delegation object.
@property (nonatomic, weak) id <NavigationDrawerControllerDelegate> _Nullable delegate;

/// A CGFloat property that sets the animation duration of the leftView when closing and opening. Defaults to 0.25.
@property (nonatomic) CGFloat animationDuration;

/// A Boolean property that enables and disables the leftView from opening and closing. Defaults to true.
@property (nonatomic) BOOL enabled;

/// A Boolean property that enables and disables the leftView from opening and closing. Defaults to true.
@property (nonatomic) BOOL enabledLeftView;

/// Enables the left pan gesture.
@property (nonatomic) BOOL enabledLeftPanGesture;

/// Enables the left tap gesture.
@property (nonatomic) BOOL enabledLeftTapGesture;

/// A Boolean property that enables and disables the rightView from opening and closing. Defaults to true.
@property (nonatomic) BOOL enabledRightView;

/// Enables the right pan gesture.
@property (nonatomic) BOOL enabledRightPanGesture;

/// Enables the right tap gesture.
@property (nonatomic) BOOL enabledRightTapGesture;

/// A Boolean property that triggers the status bar to be hidden when the leftView is opened. Defaults to true.
@property (nonatomic) BOOL enableHideStatusBar;

/// Sets the statusBar to hidden or not.
@property (nonatomic, readonly) BOOL statusBarHidden;

/// A MaterialView property that is used to hide and reveal the leftViewController. It is very rare that this property will need to be accessed externally.
@property (nonatomic, readonly, strong) MaterialView * _Nullable leftView;

/// A MaterialView property that is used to hide and reveal the rightViewController. It is very rare that this property will need to be accessed externally.
@property (nonatomic, readonly, strong) MaterialView * _Nullable rightView;

/// Indicates whether the leftView or rightView is opened.
@property (nonatomic, readonly) BOOL opened;

/// indicates if the leftView is opened.
@property (nonatomic, readonly) BOOL openedLeftView;

/// Indicates if the rightView is opened.
@property (nonatomic, readonly) BOOL openedRightView;

/// Content view controller to encompase the entire component. This is primarily used when the StatusBar is being hidden. The alpha value of the rootViewController decreases, and shows the StatusBar. To avoid this, and to add a hidden transition viewController for complex situations, the contentViewController was added.
@property (nonatomic, readonly, strong) UIViewController * _Nonnull contentViewController;

/// A UIViewController property that references the active left UIViewController.
@property (nonatomic, readonly, strong) UIViewController * _Nullable leftViewController;

/// A UIViewController property that references the active right UIViewController.
@property (nonatomic, readonly, strong) UIViewController * _Nullable rightViewController;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with an Optional nib and bundle.
///
/// \param nibNameOrNil An Optional String for the nib.
///
/// \param bundle An Optional NSBundle where the nib is located.
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;

/// An initializer for the NavigationDrawerController.
///
/// \param rootViewController The main UIViewController.
///
/// \param leftViewController An Optional left UIViewController.
///
/// \param rightViewController An Optional right UIViewController.
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController leftViewController:(UIViewController * _Nullable)leftViewController rightViewController:(UIViewController * _Nullable)rightViewController OBJC_DESIGNATED_INITIALIZER;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;

/// Layout subviews.
- (void)layoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;

/// A method that is used to set the width of the leftView when opened. This is the recommended method of setting the leftView width.
///
/// \param width A CGFloat value to set as the new width.
///
/// \param hidden A Boolean value of whether the leftView
/// should be hidden after the width has been updated or not.
///
/// \param animated A Boolean value that indicates to animate
/// the leftView width change.
- (void)setLeftViewWidth:(CGFloat)width hidden:(BOOL)hidden animated:(BOOL)animated duration:(NSTimeInterval)duration;

/// A method that is used to set the width of the rightView when opened. This is the recommended method of setting the rightView width.
///
/// \param width A CGFloat value to set as the new width.
///
/// \param hidden A Boolean value of whether the rightView
/// should be hidden after the width has been updated or not.
///
/// \param animated A Boolean value that indicates to animate
/// the rightView width change.
- (void)setRightViewWidth:(CGFloat)width hidden:(BOOL)hidden animated:(BOOL)animated duration:(NSTimeInterval)duration;

/// A method that toggles the leftView opened if previously closed, or closed if previously opened.
///
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
- (void)toggleLeftView:(CGFloat)velocity;

/// A method that toggles the rightView opened if previously closed, or closed if previously opened.
///
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
- (void)toggleRightView:(CGFloat)velocity;

/// A method that opens the leftView.
///
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
- (void)openLeftView:(CGFloat)velocity;

/// A method that opens the rightView.
///
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
- (void)openRightView:(CGFloat)velocity;

/// A method that closes the leftView.
///
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
- (void)closeLeftView:(CGFloat)velocity;

/// A method that closes the rightView.
///
/// \param velocity A CGFloat value that sets the
/// velocity of the user interaction when animating the
/// leftView. Defaults to 0.
- (void)closeRightView:(CGFloat)velocity;

/// Detects the gesture recognizer being used.
///
/// \param gestureRecognizer A UIGestureRecognizer to detect.
///
/// \param touch The UITouch event.
///
/// \returns  A Boolean of whether to continue the gesture or not.
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch;
@end

enum NavigationDrawerPosition : NSInteger;

SWIFT_PROTOCOL_NAMED("NavigationDrawerControllerDelegate")
@protocol NavigationDrawerControllerDelegate
@optional

/// An optional delegation method that is fired before the NavigationDrawerController opens.
- (void)navigationDrawerWillOpen:(NavigationDrawerController * _Nonnull)navigationDrawerController position:(enum NavigationDrawerPosition)position;

/// An optional delegation method that is fired after the NavigationDrawerController opened.
- (void)navigationDrawerDidOpen:(NavigationDrawerController * _Nonnull)navigationDrawerController position:(enum NavigationDrawerPosition)position;

/// An optional delegation method that is fired before the NavigationDrawerController closes.
- (void)navigationDrawerWillClose:(NavigationDrawerController * _Nonnull)navigationDrawerController position:(enum NavigationDrawerPosition)position;

/// An optional delegation method that is fired after the NavigationDrawerController closed.
- (void)navigationDrawerDidClose:(NavigationDrawerController * _Nonnull)navigationDrawerController position:(enum NavigationDrawerPosition)position;

/// An optional delegation method that is fired when the NavigationDrawerController pan gesture begins.
- (void)navigationDrawerPanDidBegin:(NavigationDrawerController * _Nonnull)navigationDrawerController point:(CGPoint)point position:(enum NavigationDrawerPosition)position;

/// An optional delegation method that is fired when the NavigationDrawerController pan gesture changes position.
- (void)navigationDrawerPanDidChange:(NavigationDrawerController * _Nonnull)navigationDrawerController point:(CGPoint)point position:(enum NavigationDrawerPosition)position;

/// An optional delegation method that is fired when the NavigationDrawerController pan gesture ends.
- (void)navigationDrawerPanDidEnd:(NavigationDrawerController * _Nonnull)navigationDrawerController point:(CGPoint)point position:(enum NavigationDrawerPosition)position;

/// An optional delegation method that is fired when the NavigationDrawerController tap gesture executes.
- (void)navigationDrawerDidTap:(NavigationDrawerController * _Nonnull)navigationDrawerController point:(CGPoint)point position:(enum NavigationDrawerPosition)position;

/// An optional delegation method that is fired when the status bar is about to change display, hidden or not.
- (void)navigationDrawerStatusBarHiddenState:(NavigationDrawerController * _Nonnull)navigationDrawerController hidden:(BOOL)hidden;
@end

typedef SWIFT_ENUM(NSInteger, NavigationDrawerPosition) {
  NavigationDrawerPositionLeft = 0,
  NavigationDrawerPositionRight = 1,
};


SWIFT_CLASS("_TtC8Material12RaisedButton")
@interface RaisedButton : MaterialButton

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC8Material9SearchBar")
@interface SearchBar : BarView

/// The UITextField for the searchBar.
@property (nonatomic, readonly, strong) UITextField * _Null_unspecified textField;

/// Reference to the clearButton.
@property (nonatomic, readonly, strong) IconButton * _Null_unspecified clearButton;

/// Handle the clearButton manually.
@property (nonatomic) BOOL clearButtonAutoHandleEnabled;

/// TintColor for searchBar.
@property (nonatomic, strong) UIColor * _Nullable tintColor;

/// TextColor for searchBar.
@property (nonatomic, strong) UIColor * _Nullable textColor;

/// Sets the textField placeholder value.
@property (nonatomic, copy) NSString * _Nullable placeholder;

/// Placeholder textColor.
@property (nonatomic, strong) UIColor * _Nonnull placeholderColor;
- (void)layoutSubviews;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init() initializer.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer with parameter settings.
///
/// \param leftControls An Array of UIControls that go on the left side.
///
/// \param rightControls An Array of UIControls that go on the right side.
- (nonnull instancetype)initWithLeftControls:(NSArray<UIControl *> * _Nullable)leftControls rightControls:(NSArray<UIControl *> * _Nullable)rightControls OBJC_DESIGNATED_INITIALIZER;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;

/// Layout the clearButton.
- (void)layoutClearButton;
@end


SWIFT_CLASS("_TtC8Material19SearchBarController")
@interface SearchBarController : RootController

/// Reference to the SearchBar.
@property (nonatomic, readonly, strong) SearchBar * _Null_unspecified searchBar;

/// To execute in the order of the layout chain, override this method. LayoutSubviews should be called immediately, unless you have a certain need.
- (void)layoutSubviews;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material19StatusBarController")
@interface StatusBarController : RootController

/// A reference to the statusBarView.
@property (nonatomic, readonly, strong) MaterialView * _Null_unspecified statusBarView;

/// To execute in the order of the layout chain, override this method. LayoutSubviews should be called immediately, unless you have a certain need.
- (void)layoutSubviews;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Material6TabBar")
@interface TabBar : MaterialView

/// A reference to the line UIView.
@property (nonatomic, readonly, strong) UIView * _Null_unspecified line;

/// Will render the view.
@property (nonatomic, readonly) BOOL willRenderView;

/// Buttons.
@property (nonatomic, copy) NSArray<UIButton *> * _Nullable buttons;
- (void)layoutSubviews;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

@class TextStorage;
@protocol TextDelegate;

SWIFT_CLASS_NAMED("Text")
@interface Text : NSObject

/// The string pattern to match within the textStorage.
@property (nonatomic, copy) NSString * _Nonnull pattern;

/// TextStorage instance that is observed while editing.
@property (nonatomic, readonly, strong) TextStorage * _Nonnull textStorage;

/// Delegation object for pre and post text processing.
@property (nonatomic, weak) id <TextDelegate> _Nullable delegate;

/// Initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// A convenience property that accesses the textStorage string.
@property (nonatomic, readonly, copy) NSString * _Nonnull string;

/// An Array of matches that match the pattern expression.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull matches;

/// An Array of unique matches that match the pattern expression.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull uniqueMatches;
@end

@class NSTextCheckingResult;

SWIFT_PROTOCOL_NAMED("TextDelegate")
@protocol TextDelegate
@optional

/// An optional delegation method that is executed when text will be processed during editing.
///
/// \param text The Text instance assodicated with the
/// delegation object.
///
/// \param textStorage The TextStorage instance
/// associated with the delegation object.
///
/// \param string The string value that is currently
/// being edited.
///
/// \param range The range of characters that are being
/// edited.
- (void)textWillProcessEdit:(Text * _Nonnull)text textStorage:(TextStorage * _Nonnull)textStorage string:(NSString * _Nonnull)string range:(NSRange)range;

/// An optional delegation method that is executed after the edit processing has completed.
///
/// \param text The Text instance assodicated with the
/// delegation object.
///
/// \param textStorage The TextStorage instance
/// associated with the delegation object.
///
/// \param string The string value that was edited.
///
/// \param result A NSTextCheckingResult associated
/// with the processing result.
///
/// \param flags Matching flags.
///
/// \param stop Halts a service which is either
/// publishing or resolving.
- (void)textDidProcessEdit:(Text * _Nonnull)text textStorage:(TextStorage * _Nonnull)textStorage string:(NSString * _Nonnull)string result:(NSTextCheckingResult * _Nullable)result flags:(NSMatchingFlags)flags stop:(BOOL * _Null_unspecified)stop;
@end


@class NSMutableAttributedString;
@class NSRegularExpression;

SWIFT_CLASS("_TtC8Material11TextStorage")
@interface TextStorage : NSTextStorage

/// A storage facility for attributed text.
@property (nonatomic, strong) NSMutableAttributedString * _Nonnull store;

/// The regular expression to match text fragments against.
@property (nonatomic, strong) NSRegularExpression * _Nullable expression;

/// Initializer.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Initializer.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// A String value of the attirbutedString property.
@property (nonatomic, readonly, copy) NSString * _Nonnull string;

/// Processes the text when editing.
- (void)processEditing;

/// Returns the attributes for the character at a given index.
///
/// \param location The index for which to return attributes.
/// This value must lie within the bounds of the receiver.
///
/// \param range Upon return, the range over which the
/// attributes and values are the same as those at index. This range
/// isn’t necessarily the maximum range covered, and its extent is
/// implementation-dependent. If you need the maximum range, use
/// attributesAtIndex:longestEffectiveRange:inRange:.
/// If you don't need this value, pass NULL.
///
/// \returns  The attributes for the character at index.
- (NSDictionary<NSString *, id> * _Nonnull)attributesAtIndex:(NSUInteger)location effectiveRange:(NSRangePointer _Null_unspecified)range;

/// Replaces a range of text with a string value.
///
/// \param range The character range to replace.
///
/// \param str The string value that the characters
/// will be replaced with.
- (void)replaceCharactersInRange:(NSRange)range withString:(NSString * _Nonnull)str;

/// Sets the attributedString attribute values.
///
/// \param attrs The attributes to set.
///
/// \param range A range of characters that will have their
/// attributes updated.
- (void)setAttributes:(NSDictionary<NSString *, id> * _Nullable)attrs range:(NSRange)range;
@end

@class NSAttributedString;
@class NSTextContainer;

SWIFT_CLASS_NAMED("TextView")
@interface TextView : UITextView

/// This property is the same as clipsToBounds. It crops any of the view's contents from bleeding past the view's frame.
@property (nonatomic) BOOL masksToBounds;

/// A property that accesses the backing layer's backgroundColor.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;

/// A property that accesses the layer.frame.origin.x property.
@property (nonatomic) CGFloat x;

/// A property that accesses the layer.frame.origin.y property.
@property (nonatomic) CGFloat y;

/// A property that accesses the layer.frame.size.width property.
@property (nonatomic) CGFloat width;

/// A property that accesses the layer.frame.size.height property.
@property (nonatomic) CGFloat height;

/// A property that accesses the backing layer's shadowColor.
@property (nonatomic, strong) UIColor * _Nullable shadowColor;

/// A property that accesses the backing layer's shadowOffset.
@property (nonatomic) CGSize shadowOffset;

/// A property that accesses the backing layer's shadowOpacity.
@property (nonatomic) float shadowOpacity;

/// A property that accesses the backing layer's shadowRadius.
@property (nonatomic) CGFloat shadowRadius;

/// A property that accesses the backing layer's shadowPath.
@property (nonatomic) CGPathRef _Nullable shadowPath;

/// Enables automatic shadowPath sizing.
@property (nonatomic) BOOL shadowPathAutoSizeEnabled;

/// A property that accesses the layer.cornerRadius.
@property (nonatomic) CGFloat cornerRadius;

/// A property that accesses the layer.borderWith.
@property (nonatomic) CGFloat borderWidth;

/// A property that accesses the layer.borderColor property.
@property (nonatomic, strong) UIColor * _Nullable borderColor;

/// A property that accesses the layer.position property.
@property (nonatomic) CGPoint position;

/// A property that accesses the layer.zPosition property.
@property (nonatomic) CGFloat zPosition;

/// The title UILabel that is displayed when there is text. The titleLabel text value is updated with the placeholderLabel text value before being displayed.
@property (nonatomic, strong) UILabel * _Nullable titleLabel;

/// The color of the titleLabel text when the textView is not active.
@property (nonatomic, strong) UIColor * _Nullable titleLabelColor;

/// The color of the titleLabel text when the textView is active.
@property (nonatomic, strong) UIColor * _Nullable titleLabelActiveColor;

/// A property that sets the distance between the textView and titleLabel.
@property (nonatomic) CGFloat titleLabelAnimationDistance;

/// Placeholder UILabel view.
@property (nonatomic, strong) UILabel * _Nullable placeholderLabel;

/// An override to the text property.
@property (nonatomic, copy) NSString * _Null_unspecified text;

/// An override to the attributedText property.
@property (nonatomic, strong) NSAttributedString * _Null_unspecified attributedText;

/// Text container UIEdgeInset property.
@property (nonatomic) UIEdgeInsets textContainerInset;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init() initializer.
///
/// \param frame A CGRect instance.
///
/// \param textContainer A NSTextContainer instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer that is mostly used with AutoLayout.
///
/// \param textContainer A NSTextContainer instance.
- (nonnull instancetype)initWithTextContainer:(NSTextContainer * _Nullable)textContainer;

/// Overriding the layout callback for subviews.
- (void)layoutSubviews;

/// A method that accepts CAAnimation objects and executes them on the view's backing layer.
///
/// \param animation A CAAnimation instance.
- (void)animate:(CAAnimation * _Nonnull)animation;

/// A delegation method that is executed when the backing layer starts running an animation.
///
/// \param anim The currently running CAAnimation instance.
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;

/// A delegation method that is executed when the backing layer stops running an animation.
///
/// \param anim The CAAnimation instance that stopped running.
///
/// \param flag A boolean that indicates if the animation stopped
/// because it was completed or interrupted. True if completed, false
/// if interrupted.
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end


SWIFT_PROTOCOL_NAMED("TextViewDelegate")
@protocol TextViewDelegate <UITextViewDelegate>
@end


SWIFT_CLASS("_TtC8Material7Toolbar")
@interface Toolbar : BarView

/// A convenience property to set the titleLabel text.
@property (nonatomic, copy) NSString * _Nullable title;

/// Title label.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;

/// A convenience property to set the detailLabel text.
@property (nonatomic, copy) NSString * _Nullable detail;

/// Detail label.
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified detailLabel;
- (void)layoutSubviews;

/// An initializer that initializes the object with a NSCoder object.
///
/// \param aDecoder A NSCoder instance.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// An initializer that initializes the object with a CGRect object. If AutoLayout is used, it is better to initilize the instance using the init() initializer.
///
/// \param frame A CGRect instance.
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;

/// A convenience initializer with parameter settings.
///
/// \param leftControls An Array of UIControls that go on the left side.
///
/// \param rightControls An Array of UIControls that go on the right side.
- (nonnull instancetype)initWithLeftControls:(NSArray<UIControl *> * _Nullable)leftControls rightControls:(NSArray<UIControl *> * _Nullable)rightControls OBJC_DESIGNATED_INITIALIZER;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
@end

@protocol ToolbarControllerDelegate;

SWIFT_CLASS_NAMED("ToolbarController")
@interface ToolbarController : RootController

/// Reference to the Toolbar.
@property (nonatomic, readonly, strong) Toolbar * _Null_unspecified toolbar;

/// Delegation handler.
@property (nonatomic, weak) id <ToolbarControllerDelegate> _Nullable delegate;

/// A floating UIViewController.
@property (nonatomic, strong) UIViewController * _Nullable floatingViewController;

/// To execute in the order of the layout chain, override this method. LayoutSubviews should be called immediately, unless you have a certain need.
- (void)layoutSubviews;

/// Prepares the view instance when intialized. When subclassing, it is recommended to override the prepareView method to initialize property values and other setup operations. The super.prepareView method should always be called immediately when subclassing.
- (void)prepareView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("ToolbarControllerDelegate")
@protocol ToolbarControllerDelegate <MaterialDelegate>
@optional

/// Delegation method that executes when the floatingViewController will open.
- (void)toolbarControllerWillOpenFloatingViewController:(ToolbarController * _Nonnull)toolbarController;

/// Delegation method that executes when the floatingViewController will close.
- (void)toolbarControllerWillCloseFloatingViewController:(ToolbarController * _Nonnull)toolbarController;

/// Delegation method that executes when the floatingViewController did open.
- (void)toolbarControllerDidOpenFloatingViewController:(ToolbarController * _Nonnull)toolbarController;

/// Delegation method that executes when the floatingViewController did close.
- (void)toolbarControllerDidCloseFloatingViewController:(ToolbarController * _Nonnull)toolbarController;
@end


@interface UIFont (SWIFT_EXTENSION(Material))

/// :name:	stringSize
- (CGSize)stringSize:(NSString * _Nonnull)string constrainedToWidth:(double)width;
@end


@interface UIImage (SWIFT_EXTENSION(Material))

/// Applies a blur effect to a UIImage.
///
/// \param blurRadius The radius of the blur effect.
///
/// \param tintColor The color used for the blur effect (optional).
///
/// \param saturationDeltaFactor The delta factor for the saturation of the blur effect.
///
/// \returns  a UIImage.
- (UIImage * _Nullable)filterBlur:(CGFloat)blurRadius tintColor:(UIColor * _Nullable)tintColor saturationDeltaFactor:(CGFloat)saturationDeltaFactor;
@end


@interface UIImage (SWIFT_EXTENSION(Material))

/// Creates an clear image.
///
/// \returns  A UIImage that is clear.
+ (UIImage * _Nonnull)clearImage;
@end


@interface UIImage (SWIFT_EXTENSION(Material))

/// Creates a new image with the passed in color.
///
/// \param color The UIColor to create the image from.
///
/// \returns  A UIImage that is the color passed in.
- (UIImage * _Nonnull)tintWithColor:(UIColor * _Nonnull)color;
@end


@interface UIImage (SWIFT_EXTENSION(Material))

/// Creates an Image that is a color.
///
/// \param color The UIColor to create the image from.
///
/// \param size The size of the image to create.
///
/// \returns  A UIImage that is the color passed in.
+ (UIImage * _Nonnull)imageWithColor:(UIColor * _Nonnull)color size:(CGSize)size;
@end


@interface UIImage (SWIFT_EXTENSION(Material))

/// Asynchronously load images with a completion block.
///
/// \param URL A URL destination to fetch the image from.
///
/// \param completion A completion block that is executed once the image
/// has been retrieved.
+ (void)contentsOfURL:(NSURL * _Nonnull)URL completion:(void (^ _Nonnull)(UIImage * _Nullable image, NSError * _Nullable error))completion;
@end


@interface UIImage (SWIFT_EXTENSION(Material))

/// :name:	crop
- (UIImage * _Nullable)cropToWidth:(CGFloat)tw toHeight:(CGFloat)th;
@end


@interface UIImage (SWIFT_EXTENSION(Material))

/// :name:	resize
- (UIImage * _Nullable)resizeToWidth:(CGFloat)w;

/// :name:	resize
- (UIImage * _Nullable)resizeToHeight:(CGFloat)h;
@end


@interface UIImage (SWIFT_EXTENSION(Material))

/// :name:	width
@property (nonatomic, readonly) CGFloat width;

/// :name:	height
@property (nonatomic, readonly) CGFloat height;
@end


@interface UINavigationBar (SWIFT_EXTENSION(Material))

/// Device status bar style.
@property (nonatomic) UIStatusBarStyle statusBarStyle;
@end


@interface UINavigationItem (SWIFT_EXTENSION(Material))

/// Back Button.
@property (nonatomic, readonly, strong) IconButton * _Nullable backButton;

/// Content View.
@property (nonatomic, readonly, strong) UIView * _Nullable contentView;

/// Title Label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull titleLabel;

/// Detail text.
@property (nonatomic, copy) NSString * _Nullable detail;

/// Detail Label.
@property (nonatomic, readonly, strong) UILabel * _Nonnull detailLabel;

/// Left side UIControls.
@property (nonatomic, copy) NSArray<UIControl *> * _Nullable leftControls;

/// Right side UIControls.
@property (nonatomic, copy) NSArray<UIControl *> * _Nullable rightControls;
@end


@interface UITabBar (SWIFT_EXTENSION(Material))
@end


@interface UITabBarItem (SWIFT_EXTENSION(Material))

/// Sets the color of the title color for a state.
- (void)setTitleColor:(UIColor * _Nonnull)color forState:(UIControlState)state;
@end


@interface UIView (SWIFT_EXTENSION(Material))
@end


@interface UIView (SWIFT_EXTENSION(Material))
@end


@interface UIViewController (SWIFT_EXTENSION(Material))

/// A convenience property that provides access to the StatusBarController. This is the recommended method of accessing the StatusBarController through child UIViewControllers.
@property (nonatomic, readonly, strong) StatusBarController * _Nullable statusBarController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))

/// A convenience property that provides access to the ToolbarController. This is the recommended method of accessing the ToolbarController through child UIViewControllers.
@property (nonatomic, readonly, strong) ToolbarController * _Nullable toolbarController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))

/// A convenience property that provides access to the NavigationDrawerController. This is the recommended method of accessing the NavigationDrawerController through child UIViewControllers.
@property (nonatomic, readonly, strong) NavigationDrawerController * _Nullable navigationDrawerController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))

/// A convenience property that provides access to the SearchBarController. This is the recommended method of accessing the SearchBarController through child UIViewControllers.
@property (nonatomic, readonly, strong) SearchBarController * _Nullable searchBarController;
@end


@interface UIViewController (SWIFT_EXTENSION(Material))

/// A convenience property that provides access to the MenuController. This is the recommended method of accessing the MenuController through child UIViewControllers.
@property (nonatomic, readonly, strong) MenuController * _Nullable menuController;
@end

#pragma clang diagnostic pop
